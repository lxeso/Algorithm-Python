# 알파벳 개수
# 알파벳 소문자로만 이루어진 단어 s에서 각 알파벳이 단어에 몇개가 포함되어 있는지 계산
# 생각한 로직 : 1. 알파벳 a부터 z까지 담은 리스트 선언 2.결과(개수)를 담을 리스트 선언 3. for문 사용하여 알파벳 리스트와 단어 s의 알파벳이 일치하는게 있다면 결과 리스트에 +1 해주고 반환
# 사용한 첫번째 로직 : 
#   1. 결과(개수)를 담을 리스트 선언 및 0으로 초기화 
#   2. 단어 s 양쪽 공백 제거하며 입력 받기 
#   3. 단어 s를 기준으로 for 반복문 돌리기 
#   4. for 반복문 안에서 결과(개수) 리스트의 인덱스를 ord[char]-ord['a']와 같이 설정하여 단어 s에 있는 문자들만 검사해 +1 시켜주기 
#   5. join()함수를 사용해 하나의 문자열로 반환
# 사용한 두번째 로직 : 
#   1. collections의 Counter 클래스를 사용하여 단어 s의 각 문자마다 개수를 저장 
#   2. 결과 리스트 선언 3. for 반복문을 사용하여 알파벳 'a'부터 'z'까지 반복문을 돌림 
#   3. 결과(개수) 리스트에 counter.get() 함수를 사용하여 현재 문자의 개수를 가져오고, 만약 그 문자가 counter에 존재하지 않는다면 0을 반환 
#   4. 리스트의 모든 문자열 요소를 공백으로 구분하여 하나의 문자열로 결합하여 반환 
# 첫째 줄에 단어 S가 주어진다. 단어의 길이는 100을 넘지 않는다. 단어는 알파벳 소문자로만 이루어져 있다.

alphabet_count = [0] * 26 # 알파벳 소문자의 개수를 셀 리스트 생성 및 초기화

word_s = input().strip() # 문자열 양쪽 공백 제거하며 입력 받기

for char in word_s: # 단어 s의 문자들로 반복문 돌림
    alphabet_count[ord(char)-ord('a')] += 1 # 단어 s에 존재하는 문자들만 count 개수 올라감. 단어 s에 존재하지 않는 문자들의 경우 변하지 않고 초기값 0인 상태

print(' '.join(map(str, alphabet_count))) # alphabet_count 리스트의 모든 요소를 문자열로 변환 후 변환된 문자열 요소들을 공백으로 구분하여 하나의 문자열로 결합

'''
# 두 번째 로직
from collections import Counter

word_s = input().strip()  # 사용자로부터 문자열 입력 받기

counter = Counter(word_s)  # 입력된 문자열에서 각 알파벳의 개수를 셈

result = []
for char in range(ord('a'), ord('z') + 1):
    result.append(str(counter.get(chr(char), 0)))

# 결과 리스트를 공백으로 구분하여 하나의 문자열로 합치기
print(' '.join(result))

'''