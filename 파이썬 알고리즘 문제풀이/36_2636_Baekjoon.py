# 백준 2636번 치즈 BFS or DFS
# 문제 
# 입력으로 사각형 모양의 판의 크기와 한 조각의 치즈가 판 위에 주어졌을 때, 공기 중에서 치즈가 모두 녹아 없어지는 데 걸리는 시간과 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 구하는 프로그램을 작성하시오.
from collections import deque
import sys

# BFS를 이용해 외부 공기를 탐색하는 함수

dx = [-1, 1, 0, 0] # x축 이동 방향 (위, 아래)
dy = [0, 0, -1, 1] # y축 이동 방향 (왼쪽, 오른쪽)

def bfs_outside_air(N, M, board, visited):
    queue = deque([(0, 0)]) # 여러 개의 요소(이 경우 한개의 튜플(0, 0)을 리스트로 묶어 한 번에 넣음). 즉, 대괄호가 있는 이유는 처음에 큐를 여러 개의 값으로 초기화할 때 리스트로 묶어주는 것이고, 이후에 하나씩 값을 추가할 때는 바로 튜플만 넣음.
    visited[0][0] = True # (0, 0)은 이미 방문했으므로 방문 처리


    # BFS 시작 : 큐가 빌 때까지 계속 탐색
    while queue:
        x, y = queue.popleft() # 큐에서 현재 좌표를 하나 꺼냄. (현재 위치)

        # 네 방향으로 탐색 (상, 하, 좌, 우)
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            # 유효한 좌표 범위 내에 있는지 확인하고, 방문한 적이 없으며, 외부 공기인 경우에만 탐색
            if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny]:
                if board[nx][ny] == 0: # 외부 공기라면
                    visited[nx][ny] = True # 방문 처리
                    queue.append((nx, ny)) # 해당 좌표를 큐에 넣어서 계속 탐색. 큐에 하나의 튜플 (nx, ny)를 '하나의 요소'로 추가.

# 치즈가 모두 녹을 때까지의 시간을 계산하고, 마지막 남은 치즈 조각의 개수를 구하는 함수
def melt_cheese(board, N, M):
    time = 0 # 총 녹는 시간 (시간이 얼마나 걸리는지 기록)
    last_cheese = 0 # 마지막으로 남은 치즈 조각의 개수

    # 치즈가 모두 녹을 떄까지 반복
    while True:
        visited = [[False] * M for _ in range(N)] # BFS 탐색에서 사용할 방문 여부를 체크하는 배열
        bfs_outside_air(N, M, board, visited) # 외부 공기만 BFS로 탐색하여 방문 처리

        cheese_to_melt = [] # 이번 시간에 녹을 치즈 좌표들을 저장할 리스트

        # 치즈 좌표를 탐색
        for i in range(N):
            for j in range(M):
                if board[i][j] == 1: # 현재 위치에 치즈가 있으면
                    # 이 치즈가 외부 공기와 접촉했는지 확인
                    for k in range(4): # 상하좌우 방향으로 탐색
                        ni = i + dx[k] # 상하좌우로 이동한 좌표 계산
                        nj = j + dy[k]
                        # 이동한 좌표가 외부 공기와 접촉한 치즈라면
                        if 0 <= ni < N and 0 <= nj < M and visited[ni][nj]:
                            cheese_to_melt.append((i, j)) # 녹을 치즈 리스트에 추가
                            break # 치즈가 외부 공기와 접촉했으니 더 탐색할 필요 없음
        if not cheese_to_melt: # 더 이상 녹을 치즈가 없으면 종료
            break # while 반복문 탈출 (모든 치즈가 녹음)

        last_cheese = len(cheese_to_melt) # 이번에 녹을 치즈 개수를 저장 (마지막 치즈 개수)

        # 치즈 녹이기
        for x, y in cheese_to_melt:
            board[x][y] = 0 # 치즈를 빈 공간(0)으로 변경 (녹았으므로)
        time += 1 # 1시간 경과 처리
    return time, last_cheese # 총 시간이 걸린 시간과 마지막 남은 치즈 개수를 반환

def solution():
    N, M  = map(int, sys.stdin.readline().split()) # N : 세로 길이, M : 가로 길이
    board = [list(map(int, sys.stdin.readline().split())) for _ in range(N)]
    
    total_time, last_cheese_count = melt_cheese(board, N, M) # 치즈가 모두 녹는 시간과 마지막 치즈개수를 계산


    # 출력 : 치즈가 모두 녹는 데 걸린 시간과 마지막 한 시간 전에 남은 치즈 개수
    print(total_time)
    print(last_cheese_count)

solution()
'''
#문제 전문# 

치즈
시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
1 초	128 MB	32728	18493	13247	55.387%
문제
아래 <그림 1>과 같이 정사각형 칸들로 이루어진 사각형 모양의 판이 있고, 그 위에 얇은 치즈(회색으로 표시된 부분)가 놓여 있다. 판의 가장자리(<그림 1>에서 네모 칸에 X친 부분)에는 치즈가 놓여 있지 않으며 치즈에는 하나 이상의 구멍이 있을 수 있다.

이 치즈를 공기 중에 놓으면 녹게 되는데 공기와 접촉된 칸은 한 시간이 지나면 녹아 없어진다. 
치즈의 구멍 속에는 공기가 없지만 구멍을 둘러싼 치즈가 녹아서 구멍이 열리면 구멍 속으로 공기가 들어가게 된다. <그림 1>의 경우, 치즈의 구멍을 둘러싼 치즈는 녹지 않고 ‘c’로 표시된 부분만 한 시간 후에 녹아 없어져서 <그림 2>와 같이 된다. 
다시 한 시간 후에는 <그림 2>에서 ‘c’로 표시된 부분이 녹아 없어져서 <그림 3>과 같이 된다.
<그림 3>은 원래 치즈의 두 시간 후 모양을 나타내고 있으며, 남은 조각들은 한 시간이 더 지나면 모두 녹아 없어진다. 그러므로 처음 치즈가 모두 녹아 없어지는 데는 세 시간이 걸린다. <그림 3>과 같이 치즈가 녹는 과정에서 여러 조각으로 나누어 질 수도 있다.

입력으로 사각형 모양의 판의 크기와 한 조각의 치즈가 판 위에 주어졌을 때, 공기 중에서 치즈가 모두 녹아 없어지는 데 걸리는 시간과 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 구하는 프로그램을 작성하시오.
<그림 1> 원래 치즈 모양
X X X X X X X X X X X X
X 0 0 0 0 0 0 0 0 0 0 X
X 0 0 0 0 0 0 c c 0 0 X
X c c c 0 0 0 c c 0 0 X
X c 1 1 c c c 0 0 0 0 X
X c 1 1 1 1 0 c c 0 0 X
X c 1 1 1 0 0 1 c 0 0 X
X 0 c 1 0 0 0 1 c 0 0 X
x 0 c 1 1 1 1 1 c 0 0 X
X 0 c 1 1 1 1 1 c 0 0 X
X 0 c 1 1 1 1 1 c 0 0 X
X 0 c c c c c c c 0 0 X
X X X X X X X X X X X X

<그림 2> 한 시간 후의 치즈 모양
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 c c 0 0 0 0 0 0 0 0
0 0 c 1 c c 0 0 0 0 0 0
0 0 c 1 c 0 0 c 0 0 0 0
0 0 0 c 0 0 0 c 0 0 0 0
0 0 0 c c c c c 0 0 0 0
0 0 0 c 1 1 1 c 0 0 0 0
0 0 0 c c c c c 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0

<그림 2> 두 시간 후의 치즈 모양
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 1 1 1 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0

입력
첫째 줄에는 사각형 모양 판의 세로와 가로의 길이가 양의 정수로 주어진다. 세로와 가로의 길이는 최대 100이다. 판의 각 가로줄의 모양이 윗 줄부터 차례로 둘째 줄부터 마지막 줄까지 주어진다. 치즈가 없는 칸은 0, 치즈가 있는 칸은 1로 주어지며 각 숫자 사이에는 빈칸이 하나씩 있다.

출력
첫째 줄에는 치즈가 모두 녹아서 없어지는 데 걸리는 시간을 출력하고, 둘째 줄에는 모두 녹기 한 시간 전에 남아있는 치즈조각이 놓여 있는 칸의 개수를 출력한다.

예제 입력 1 
13 12
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 1 1 0 0 0
0 1 1 1 0 0 0 1 1 0 0 0
0 1 1 1 1 1 1 0 0 0 0 0
0 1 1 1 1 1 0 1 1 0 0 0
0 1 1 1 1 0 0 1 1 0 0 0
0 0 1 1 0 0 0 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 1 1 1 1 1 1 1 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
예제 출력 1 
3
5


'''